-----------/issues

*vc pode referenciar a issue no commit/push com "close #<id da issue>", caso a pull request seja incorporada na upstream
master, automaticamente será encerrado o issue

*vc deve refenciar a na descrição da pull request com "close #<id da issue>", as vezes issa descrição carrega do commit
automaticamente.

-----------/code review
*quando vc faz um comentario em um trexo do codigo de um pull request


-----------/rejeitando solicitação pull request

*vc rejeita o PR na aba comments, clicando em "close and comment". Apos isso a imprementação da Feature Branch deve ser
refeita pelo programador.

-----------/desfazer mudanças. Retorna o codigo para o commit anterior.

Terminal:  git reset --hard HEAD^1
OBS: esse processo é problematico pois quando vc for enviar as mudanças pro seu fork, vc vai ter q fazer "git push force"
por q vc alterou o historico do projeto

-----------/branch

*vc pode conferir a branch clicando no canto inferior direito em (master). Assim vc vai ver as branchs locais e remotas.
EX: local: master -> remote: origin/master

*vc pode conferir as branchs locais com o comando "git branch", ou locais e remotas com "git branch --all"

*o nome "origin" é um apelido para o seu repositorio remoto, vc consegue conferir o link do seu repositorio remoto
com "git remote -v"

*quando vc da um "git clone" vc nao apenas clona o repositorio, como tbm conecta o seu repositorio
local com o respositorio remoto

*git push: "git push" faz um "git push origin master" que faz o push para o repositorio "origin" na branch "master"

*no caso do seu repositorio origin for um fork de outro repositorio remoto, vc pode adicionar esse repositorio original,
 que normalmente é chamado de "upstream", da seguinte forma:

-com o comando git remote add upstream git@github.com:nomedogrupo/nomedoprojeto.git
-atravez do pycharm: git/manage remotes/


------------------/fetch:

*carrega as mudanças nos repositorios remotos para o seu ambiente local. Vc deve fazer isso para carregar o
repositorio upstream, uma vez q vc adicionou esse repositorio com "git remote add"
-caminho pycharm: git/fetch

-----------------/criando nova Branch e entrando nela

*Criando nova branch:
caminho: canto inferior direito clique no icone do git.

*Acessando a nova branch:
-caminho: canto inferior direito clique no icone do git >checkout


--------/feature branch

*é uma metodologia de criar uma branch para cada implementação de feature associada a uma issue. Dessa forma vc faz o
pull request para a branch upstream, e caso seja rejeitado, vc apenas precisa apagar a "feature branch" ao invez de
retroceder a sua branch origin : master

*A branch master (origin) deve sempre ficar sincronizada com a upstream, para vc n ter q ficar revertendo codigo.

*se o pull request da feature branch for aceito e tiver sido incorporado na master upstream, vc deve deletar a sua feature
branch, dar um fetch na branch remota (comando: git fetch upstream), e dar um merge da sua branch master local com a
"remote master upstream" (caso vc esteja na local master vá ate "upstream/master", e selecione a opção merge).
Apos isso dê um push para sua origin:


                                    /--------Resoluções de erros--------/


--------/criação e checkout de branch master apartir do repositorio remoto original, sem ter comitado a branch ramo

quando o ramo da branch master é modificado sem ser comitado, e eu tento criar um novo master (apos ter
deletado o antigo)com a opção "checkout branck" marcada, acontece um conflito de versoes, onde posso:

*force chekout:  deleta as mudanças nao comitadas do ramo e cria o master apartir do repositorio remoto, e da um chekout nele(entra nele).

* smart chekout: abrira o patch conflit, mostrando a versao do master q vc esta criando a direita(do jeito q veio do repositorio remoto), a versao do ramo que vc n comitou a esquerda, e o resultado no meio( que vai ser sobreposto no main que vc esta criando.)

-se vc enviar as modificações nao comitadas pro resultado e aplicar, as modificações nao comitadas do ramo vao ser sobrescritas pela ultima versao comitada da branch ramo, e vai ser enviadas pra branch q vc esta criando

OBS: sempre que vc tenta dar checkout numa branch sem comitar modificações da branch q vc está, abre o
"git checkout problem"

resumo: basicamente ele pergunta se vc quer enviar as modificações comitadas da branch ramo e as nao
comitadas para a branch master q vc esta criando, e a branch ramo vai ser sobrescrita pela ultima versao
comitada.







