quando vc troca um objeto por outro (outro objetomock)


        BIBLIOTECA MOCK
from unittest.mock import mock (ou use o pytest-mock)
o mock server para testar por ex:
-quantas vezes o metodo é chamado
-quais parametros foram passados pro metodo

    MODULO COMO OBJETO - REDEFININDO FUNÇÕES IMPORTADAS COM MOCK
vc pode atribuir um Mock com um retorno predefinido( Mock(return_value=nomedevariavel) a um metodo de uma biblioteca
que é importada para para o modulo que vc esta importando no escopo atual de codigo.

    RETURN_VALUE DO MOCK
faz com quem seja retornado um valor expecifico ao executar um metodo
Utilize o pytest-mock para modificar uma lib para um test, retornando ao normal apos o test.
ex: pythontools/libpythonph/git_hubapi.py   pythontools/libpythonph/tests/test_spam/test_github_api.py
    AULA pyools>testes automaticos>injeção de dependencias>modulo como objeto

    @pytest.fixture
def avatar_url(mocker):
    resp_mock = Mock()
    url = 'https://avatars.githubusercontent.com/u/402714?v=4'
    resp_mock.json.return_value = {
        'login': 'renzo', 'id': 402714,
        'avatar_url': url
    }
    get_mock = mocker.patch('libpythonph.git_hubapi.requests.get')
    # vc atribui um Mock a um metodo get da biblioteca requests que foi importada para para o pacote libpythonph que vc
    # importou no escopo desse codigo. Com pytest-mock a lib volta ao normal apos o test automaticamente.
    get_mock.return_value = resp_mock
    return url

----------------------------------------
    EX:

from unittest.mock import mock

mock = Mock()

mock.executar_metodo()  #retorna outro mock como resultado, grava como ocorreu a execução

mock.executar_metodo.assert_called_once_with()  #não vai dar erro, pois ele nao foi executado com nenhum parametro ainda

mock.executar_metodo.assert_called_once_with("pedro") #vai retornar erro, pois foi chamado sem nenhum parametro

-------------------------------------
Ex: pytools/libpythonph/spam/main.py    pytools/libpythonph/test/testspam/test_envio_para_base_de_usuario.py